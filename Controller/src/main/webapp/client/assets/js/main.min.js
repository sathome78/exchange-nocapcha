var capcha_passed_login = false;
var capcha_passed_reg = false;
var capcha_passed_restore = false;

/**
 * Field for check that email is correct, right
 */
var isEmailRight = false;

var isEmailRightRestore = false;

function capResultChecLogin(response) {
    capcha_passed_login = true;
    checkAuthForm()
    $('#cpch-head-field').addClass('passed');
}

function capExpiredLogin() {
    capcha_passed_login = false;
    checkAuthForm()
    $('#cpch-head-field').removeClass('passed');
}

function capResultChecReg(response) {
    capcha_passed_reg = true;
    tryActivateRegistration();
}

function capExpiredReg() {
    capcha_passed_reg = false;
    tryActivateRegistration();
}

function capResultChecRestore(response) {
    capcha_passed_restore = true;
    tryActivaterestore();
}

function capExpiredRestore() {
    capcha_passed_restore = false;
    tryActivaterestore();
}

jQuery(document).ready(function($) {

    /**
     * Pattern for email field
     */
    const emailPattern = new RegExp("^[\\w+_.!<>#$%&'*+,/=?`{|}~^-]+(?:\\.[\\w+_.-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$");
    const emailRegexPattern = new RegExp("^[\\w+_.-]+(?:\\.[\\w+_.-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$");

    /**
     * Pattern for password field
     */
    const passwordPatternLettersAndNumbers = new RegExp("^(?=.*\\d)(?=.*[a-zA-Z])[\\w]{8,20}$");
    const passwordPatternLettersAndCharacters = new RegExp("^(?=.*[a-zA-Z])(?=.*[@*%!#^!&$<>])[\\w\\W]{8,20}$");
    const passwordPatternLettersAndNumbersAndCharacters = new RegExp("^(?=.*\\d)(?=.*[a-zA-Z])(?=.*[@*%!#^!&$<>])[\\w\\W]{8,20}$");

    /**
     * Pattern for nickname field
     */
    const nicknamePatternStartWithDigit = new RegExp("^\\d");
    const nicknamePatternStartWithSymbol = new RegExp("^[\\W^_]");
    const nicknamePatternLenght = new RegExp("^.{2,20}$");
    const nicknamePatternContainSpecialCharacters = new RegExp("[^\\w-.]");
    const nicknamePatternOnlyLatinCharacters = new RegExp("[а-яА-ЯіІёЁ]");

    /**
     * Pattern for fields. Check when field contains space
     */
    const fieldContainsSpace = new RegExp("\\s");


    $(function () {
        if ($('#user_auth_status') && $('#user_auth_status').val() === 'false') {
            $('#regT').trigger('click');
        }
    });

    $('[data-fancybox]').fancybox({

        baseTpl:
        '<div class="fancybox-container">' +
        '<div class="fancybox-bg"></div>' +
        '<div class="fancybox-inner">' +
        '<div class="fancybox-stage"></div>' +
        '</div>' +
        '</div>',

        btnTpl: {
            smallBtn:
                '<div data-fancybox-close class="popup__close"></div>',
        },
        animationEffect: 'zoom-in-out',
        animationDuration: 200,
        afterClose: function () {
            resetFancyState();
        }
    });


    $('.js-coverbox[data-fancybox]').fancybox({

        baseTpl:
        '<div class="fancybox-container">' +
        '<div class="fb-bg"></div>' +
        '<div class="fancybox-inner">' +
        '<div class="fancybox-stage"></div>' +
        '</div>' +
        '</div>',

        btnTpl: {
            smallBtn: '',
        },
        modal: true,
        touch: false
    });

    $(function () {
        if(window.location.href.indexOf("?login") > -1)
        {
            loginLink.trigger('click');
        }
    });


    $(function () {
        if (getViewSource() === "passwordRecovery") {
            $('#recovery_confirmed_link').trigger('click');
        }

        if (getViewSource() === "createPassword") {
            $('#reg_confirmed').trigger('click');
        }
    });

    $('.field__input').bind('checkval',function(){
        var labelActive = 'field__label--active';
        var inputActive = 'field__input--active';

        var label = $(this).siblings('.field__label');
        if (this.value !== ''){
            $(this).addClass(inputActive);
            label.addClass(labelActive);
        } else {
            $(this).removeClass(inputActive);
            label.removeClass(labelActive);
        }
    }).on('keyup',function(){
        $(this).trigger('checkval');
    });

    $('.js-show-pwd').on('click', function() {
        var pwd = $(this).siblings('.js-pwd');
        $(this).toggleClass('field__pwd-show--active');

        if ($(pwd).attr('type') == 'password') {
            $(pwd).attr('type', 'text');
        } else {
            $(pwd).attr('type', 'password');
        }
    });

    $('[type=submit]').on('click', function () {

        var $btn  = $(this);
        var $form = $btn.closest('form');

        $form.validate({
            ignore:'',
            errorClass: 'field__error',
            errorElement: 'div',
            highlight: function(element) {
                $(element).addClass('field__input--error').siblings('.field__label').addClass('field__label--error');
            },
            unhighlight: function(element) {
                $(element).removeClass('field__input--error').siblings('.field__label').removeClass('field__label--error');
            },
            rules: {
                email: {
                    required: true,
                    email: true,
                },
                password: {
                    required: true,
                },
            },
            // submitHandler: function (form) {
            //     $btn.removeClass('btn--error');
            // },
            // invalidHandler: function(form) {
            //     $btn.addClass('btn--error');
            // }
        });

    });

    var resetFancyState = function () {
        $('.geetest_holder').remove();
        $("#wait1").css('display', 'block');
        $("#captcha_mssg").css('display', 'none');
    }

    /**
     * START
     * Transitions between forms | Simple
     */

    /** Link to login form */
    var loginLink = $('#login_link');

    loginLink.on('click', function () {
        capcha_passed_login = false;
    });

    $('#regT').on('click', function () {
        capcha_passed_reg = false;
    });

    /**
     * Back to login form
     */
    $('#back_login').on('click', function () {
        $.fancybox.close();
        loginLink.trigger('click');
    });

    $('#go_login').on('click', function () {
        $.fancybox.close();
        loginLink.trigger('click');
    });

    /** Back to login form unverifiedUser_error form */
    $('#back_login_from_unverifiedUser_error').on('click', function () {
        $.fancybox.close();
        loginLink.trigger('click');
    });

    /** Back to login form blockedUser_error form */
    $('#back_login_from_blockedUser_error').on('click', function () {
        $.fancybox.close();
        loginLink.trigger('click');
    });

    /** Call forgot password form */
    $('#forgot_pwd').on('click', function () {
        capcha_passed_restore = false;
        $.fancybox.close();
        $('#forgot_pwd_hide').trigger('click');
        tryActivaterestore();
    });

    /** Call register form */
    $('#go_to_register').on('click', function () {
        capcha_passed_reg = false;
        $.fancybox.close();
        $('#regT').trigger('click');
    });

    /** Call change nickname form */
    $('#go_to_change_nickname').on('click', function () {
        $('#nickname_change_hide').trigger('click');
    });

    /**
     * Transitions between forms | Simple
     * END
     */

    /**
     * START
     * Transitions between forms | Complex
     */

    /** Call login form, when user try to login and submit incorrect or invalid credentials and ($('#login_error').val() not null */
    $(function () {
        var error = $('#login_error').val();
        if (error) {
            loginLink.trigger('click');
        }
    });

    /** Call 2fa login form, when user try to login and submit correct or valid credentials, and in settings user set 2fa login
     * and ($('#pin_2fa_login_pin_need').val() not null */
    $(function () {
        var error = $('#pin_2fa_login_pin_need').val();
        if (error) {
            $('#pin_2fa_login_hide').trigger('click');
        }
    });

    /** Call recover password form (input email for recover password), when $('#restore_error').val() not null.
     * (header.jsp)
     */
    $(function () {
        var error = $('#restore_error').val();
        if (error) {
            $('#forgot_pwd_hide').trigger('click');
        }
    });

    /**
     * Register user on referral link (call pop-up with registration, if user used referral link)
     */
    $(function () {
        var error = $('#referral_link_for_registration').val();
        if (error) {
            $('#pwd_referral_link_for_registration_hide').trigger('click');
        }
    });

    /** Call recover password form (create password form), when $('#recoveryConfirm').val() not null
     * (recoverPassword.jsp)
     */
    $(function () {
        var success = $('#recoveryConfirm').val();
        if (success) {
            $('#recovery_confirmed_link').trigger('click');
        }
    });

    /** Call create password form, when user click on link from email and $('#successConfirm').val() not null
     * (createPassword.jsp)
     */
    $(function () {
        var success = $('#successConfirm').val();
        if (success) {
            $('#reg_confirmed').trigger('click');
        }
    });

    /** Call unconfirmedUser form, when user in status 'REGISTRED' and try to login and $('#unverifiedUser_error').val() not null */
    $(function () {
        var error = $('#unverifiedUser_error').val();
        if (error) {
            $('#pwd_unverifiedUser_hide').trigger('click');
        }
    });

    /** Call unconfirmedUser form, when user in status 'BLOCKED' and try to login and $('#blockedUser_error').val() not null */
    $(function () {
        var error = $('#blockedUser_error').val();
        if (error) {
            $('#pwd_blockedUser_hide').trigger('click');
        }
    });

    /**
     * Transitions between forms | Complex
     * END
     */

    /**
     * START
     * Operation with CAPTCHA
     */

    /** LOGIN */
    $('#login_submit').on('click', function () {
        gtag('event', 'login-success', {'event_category': 'login-form', 'event_label': 'login-success'});
        $('#login_form').submit();
    });

    $('#privacy__checked').change(function() {
        tryActivateRegistration();
    });

    /** REGISTRATION */
    $('#create_me').submit(function(e) {
        createUser();
        e.preventDefault();
    });

    /** Send new register link, when user in status 'REGISTRED' and try to login | Click on button 'Send again' */
    $('#pwd_unverifiedUser_form').submit(function(e) {
        startGeetest(sendAgainRegistrationLinkHandler);
        e.preventDefault();
    });

    /** Send link for recover password on user email */
    $('#pwd_restore_form').submit(function (e) {
        restorePasswordHandler();
        e.preventDefault();
    });

    /**
     * Operation with CAPTCHA
     * END
     */

    /**
     * Check auth form every 1 sec (need for work with autocomplete in Firefox browser)
     */
    setInterval(checkAuthForm, 1000);

    /**
     * START
     * Variable which neeeded for keyup and change event
     */

    /**
     * Check auth form when keyup in fields '#auth_email' and '#auth_pass'
     */
    $('#auth_email, #auth_pass').keyup(checkAuthForm);

    /**
     * Email validation | Register form
     */
    $('#email').on("change keyup", debounce(function(){
        isEmailRight = false;
        var email = $('#email');
        email.removeClass('field__input--error').siblings('.field__label').removeClass('field__label--error');
        $('.field__error').css('display', 'none');

        var ipBannedErrorField = $('#ip_banned_incorrect_attempts_exceeded');
        var ipBannedErrorText = "IP banned: number of incorrect attempts exceeded!";

        if(!email.val()) {
            email.addClass('field__input--error').siblings('.field__label').addClass('field__label--error');
            $('#reg__email_reequired').css('display', 'block');
            $("#reg_submit").prop('disabled', true);
            return;
        }
        if(!emailPattern.test(email.val())){
            email.addClass('field__input--error').siblings('.field__label').addClass('field__label--error');
            $('#reg__email_wrong').css('display', 'block');
            $("#reg_submit").prop('disabled', true);
            return;
        }
        if(!emailRegexPattern.test(email.val())){
            email.addClass('field__input--error').siblings('.field__label').addClass('field__label--error');
            $('#reg__email_regex').css('display', 'block');
            $("#reg_submit").prop('disabled', true);
            return;
        }
        $.ajax({
            url: "/api/public/if_email_exists",
            data: {
                email: email.val()
            },
            success: function(result){
                var email_label = $('email_label');
                if (result == ipBannedErrorText) {
                    email.addClass('field__input--error').siblings('.field__label').addClass('field__label--error');
                    ipBannedErrorField.css('display', 'block');
                    isEmailRight = false;
                    $("#reg_submit").prop('disabled', true);
                    return false;
                } else if(result == "emailExists"){
                    email.addClass('field__input--error').siblings('.field__label').addClass('field__label--error');
                    $('#reg__email_exists').css('display', 'block');
                    isEmailRight = false;
                    $("#reg_submit").prop('disabled', true);
                    return false;
                } else {
                    email.removeClass('field__input--error').siblings('.field__label').removeClass('field__label--error');
                    isEmailRight = true;
                    tryActivateRegistration();
                    return false;
                }
            }
        });
    }, 400));

    /**
     * Some part of email validation | It works instantly in contrast to the email validation, which works with the specified delay.
     * Need to instantly disabled submit button when field incorrect or invalid.
     */
    $('#email').keyup(function(){
        var email = $('#email');
        if(!email.val() || !emailPattern.test(email.val()) || !emailRegexPattern.test(email.val()) || !capcha_passed_reg) {
            $("#reg_submit").prop('disabled', true);
            return;
        }
    });

    /**
     * Email validation | Recover (reset) password form
     */
    $('#email_pwd_restore').on("change keyup", function() {
        isEmailRightRestore = false;
        var email = $('#email_pwd_restore');
        $('#pwd_restore_submit').prop('disabled', true);
        $('#email_pwd_restore_wrong').css('display', 'none');
        $('#email_pwd_restore_notExist').css('display', 'none');

        var ipBannedErrorFieldRecover = $('#ip_banned_incorrect_attempts_exceeded_recover');
        ipBannedErrorFieldRecover.css('display', 'none');

        var ipBannedErrorTextRecover = "IP banned: number of incorrect attempts exceeded!";

        if (emailPattern.test(email.val())) {
            $.ajax({
                url: "/api/public/if_email_exists",
                data: {
                    email: email.val()
                },
                success: function(result){
                    if (result == "emailExists") {
                        isEmailRightRestore = true;
                        tryActivaterestore();
                        email.removeClass('field__input--error').siblings('.field__label').removeClass('field__label--error');
                        return false;
                    } else if (result == ipBannedErrorTextRecover){
                        isEmailRightRestore = false;
                        email.addClass('field__input--error').siblings('.field__label').addClass('field__label--error');
                        ipBannedErrorFieldRecover.css('display', 'block');
                        $('#pwd_restore_submit').prop('disabled', true);
                        return false;
                    } else {
                        isEmailRightRestore = false;
                        email.addClass('field__input--error').siblings('.field__label').addClass('field__label--error');
                        $('#email_pwd_restore_notExist').css('display', 'block');
                        $('#pwd_restore_submit').prop('disabled', true);
                        return false;
                    }
                }
            });
        } else {
            email.addClass('field__input--error').siblings('.field__label').addClass('field__label--error');
            $('#email_pwd_restore_wrong').css('display', 'block');
            return false;
        }
    });

    /**
     * Password validation
     */
    $('#password').keyup(function(){
        var password = $('#password').val();
        $('#password_wrong').css('display', 'none');
        $('#password_required').css('display', 'none');
        if(!$('#password').val()) {
            $('#password').addClass('field__input--error').siblings('.field__label').addClass('field__label--error');
            $('#password_required').css('display', 'block');
            $("#pass_submit").prop('disabled', true);
            return;
        }
        if ((passwordPatternLettersAndNumbers.test(password) || passwordPatternLettersAndCharacters.test(password)
            || passwordPatternLettersAndNumbersAndCharacters.test(password)) && !fieldContainsSpace.test(password)) {
            $('#password').removeClass('field__input--error').siblings('.field__label').removeClass('field__label--error');
            $("#pass_submit").prop('disabled', false);
        } else {
            $('#password').addClass('field__input--error').siblings('.field__label').addClass('field__label--error');
            $('#password_wrong').css('display', 'block');
            $("#pass_submit").prop('disabled', true);
        }
    });

    /**
     * Some part of password validation | It works instantly in contrast to the password validation, which works with the specified delay.
     * Need to instantly disabled submit button when field incorrect or invalid.
     */
    $('#password').on("change keyup", function(){
        var password = $('#password').val();

        if((!password) || ((!passwordPatternLettersAndNumbers.test(password) || !passwordPatternLettersAndCharacters.test(password)
            || !passwordPatternLettersAndNumbersAndCharacters.test(password)) && fieldContainsSpace.test(password))) {
            $("#pass_submit").prop('disabled', true);
            return;
        }
    });

});

/**
 * Activate register button when field 'email' correct, valid, unique and user agree (checked) with exrates terms of use
 */
var tryActivateRegistration = function () {
    if ((!$('#email')[0] || ($('#email').val().length != 0) && isEmailRight && $('#privacy__checked').is(":checked")) && capcha_passed_reg) {
        $("#reg_submit").prop('disabled', false);
    } else {
        $("#reg_submit").prop('disabled', true);
    }
}

var tryActivaterestore = function () {
    if (isEmailRightRestore && capcha_passed_restore) {
        $('#pwd_restore_submit').prop('disabled', false);
    } else {
        $('#pwd_restore_submit').prop('disabled', true);
    }
}

/**
 * Activate login button when fields 'email' and 'password' not null
 */
function checkAuthForm() {
    var email = $('#auth_email').val();
    var pass = $('#auth_pass').val();
}

/**
 * Start some function (func) after some waiting time (wait)
 * @param func
 * @param wait
 * @param immediate
 * @returns {Function}
 */
function debounce(func, wait, immediate) {
    var timeout;
    return function() {
        var context = this, args = arguments;
        var later = function() {
            timeout = null;
            if (!immediate) func.apply(context, args);
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
    };
}



/**
 * Register handler
 * @param captchaObj
 */
var createUser = function () {
    var data = $('#create_me').serialize();
    $.ajax({
        type: "POST",
        url: "/createUser",
        data: data,
        success: function(data) {
            gtag('event', 'sent-form', {'event_category': 'registration-form', 'event_label': 'successe-form-sent'});
            $.fancybox.close();
            $('#confirm_email').html(data.user.email);
            $('#confirm-success').trigger('click');
        }
    });
}

/**
 * Send new link to confirm registration for user
 * @param captchaObj
 */
var sendAgainRegistrationLinkHandler = function (captchaObj) {
    captchaObj.onSuccess(function () {
        var result = captchaObj.getValidate();
        if (!result) {
            $("#notice2").show();
            setTimeout(function () {
                $("#notice2").hide();
            }, 2000);
        } else {
            $.ajax({
                type: "POST",
                url: "/register/new_link_to_confirm",
                data: {
                    _csrf: $('.s_csrf').val(),
                    unconfirmedUserEmail: $('#unconfirmedUserEmail').val(),
                    source: getViewSource(),
                    geetest_challenge: result.geetest_challenge,
                    geetest_validate: result.geetest_validate,
                    geetest_seccode: result.geetest_seccode
                },
                success: function(data) {
                    $.fancybox.close();
                    $('#confirm_email').html($('#unconfirmedUserEmail').val());
                    $('#confirm-success').trigger('click');
                }
            });

            setTimeout(function () {
                $('#create_me')[0].reset();
                $('.geetest_holder').remove();
                $("#wait1").css('display', 'block');
                $("#captcha_mssg").css('display', 'none');
            }, 2000);

        }
    })

    captchaObj.appendTo("#captcha1");
    captchaObj.onReady(function () {
        $("#wait1").css('display', 'none');
        $("#captcha_mssg").css('display', 'block');
    });
}

/**
 * Reset password handler
 */
var restorePasswordHandler = function () {
    var data = $('#pwd_restore_form').serialize();
    $.ajax({
        type: "POST",
        url: "/forgotPassword/submit",
        data: data,
        success: function (data) {
            $.fancybox.close();
            $('#confirm_email').html(data.email);
            $('#confirm-success').trigger('click');
        }
    });
}


/**
 * Need to get view source for register and register_ico.
 * Depending on the registration page, redirect the user after registering to the corresponding page.
 */
function getViewSource() {
    return window.location.pathname.replace(/\//g,'');
}

function sendUpdatePassword(){
    gtag('event', 'pass-recovered', {'event_category': 'recovered-pass','event_label': 'recovered-success',});
}
